From 2fcba908fda92ea5e4a1e18b875875a2b29ab38b Mon Sep 17 00:00:00 2001
From: Nemanja Boric <nemanja.boric@sociomantic.com>
Date: Thu, 24 Nov 2016 17:25:39 +0100
Subject: [PATCH 2/3] Enhance Fiber's guard page implementation

Adds "END OF FIBER" byte block to the guard page, same as we do in D1
Tango runtime - it was no accepted upstream but convenient to keep
locally for now.
---
 changelog/fiber-configure.dd | 6 ++++++
 changelog/fiber.dd           | 9 +++++++++
 src/core/thread.d            | 5 +++++
 3 files changed, 20 insertions(+)
 create mode 100644 changelog/fiber-configure.dd
 create mode 100644 changelog/fiber.dd

diff --git a/changelog/fiber-configure.dd b/changelog/fiber-configure.dd
new file mode 100644
index 0000000..2326735
--- /dev/null
+++ b/changelog/fiber-configure.dd
@@ -0,0 +1,6 @@
+Make fiber stack protection-page size configurable
+
+It is now possible to change the guard page size by using
+the new Fiber's constructor argument - guard_page_size. It defaults to
+`PAGE_SIZE` (the same it used to be on Windows), and specifying 0 will
+turn this feature off.
diff --git a/changelog/fiber.dd b/changelog/fiber.dd
new file mode 100644
index 0000000..926dfa1
--- /dev/null
+++ b/changelog/fiber.dd
@@ -0,0 +1,9 @@
+Add Fiber's stack-protection page for Posix.
+
+The feature already existing for Windows' fiber implementation is now added to
+the systems using mmap to allocate fibers' stacks: After (or before) the last
+page used for the Fiber's stack, the page is allocate which is protected for
+any kind of access. This will cause system to trap immediately on the fiber's
+stack overflow. If in debugger session, one can inspect contents of the memory
+before or after stack pointer and it can be seen if it contains END OF FIBER
+string pattern.
diff --git a/src/core/thread.d b/src/core/thread.d
index 6379e6c..e5a8aa3 100644
--- a/src/core/thread.d
+++ b/src/core/thread.d
@@ -4550,8 +4550,13 @@ private:
 
             static if( __traits( compiles, mmap ) )
             {
+
                 if (guardPageSize)
                 {
+                    // Mark end of stack
+                    for ( ubyte* g = cast(ubyte*)guard; g < guard + guardPageSize; g+= 32)
+                        g[0 .. 32] = cast(ubyte[]) "END OF FIBER -- END OF FIBER -- ";
+
                     // protect end of stack
                     if ( mprotect(guard, guardPageSize, PROT_NONE) == -1 )
                         abort();
-- 
2.17.1

